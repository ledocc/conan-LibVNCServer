diff --git a/CMakeLists.txt b/CMakeLists.txt
index 873cc7b..58a7395 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,12 +50,12 @@ option(WITH_24BPP "Allow 24 bpp" ON)
 option(WITH_IPv6 "Enable IPv6 Support" ON)
 option(WITH_WEBSOCKETS "Build with websockets support" ON)
 option(WITH_SASL "Build with SASL support" ON)
-
+option(BUILD_EXAMPLES "Build examples" OFF)
 
 
 if(WITH_ZLIB)
   find_package(ZLIB)
-endif(WITH_ZLIB)
+endif()
 
 if(WITH_LZO)
   find_package(LZO)
@@ -97,48 +97,47 @@ if(WITH_JPEG)
     if(NOT FOUND_LIBJPEG_TURBO)
       message(WARNING "*** The libjpeg library you are building against is not libjpeg-turbo.  Performance will be reduced.  You can obtain libjpeg-turbo from:  https://sourceforge.net/projects/libjpeg-turbo/files/ ***")
     endif()
-  endif(JPEG_FOUND)
-endif(WITH_JPEG)
-
+  endif()
+endif()
 
 if(WITH_PNG)
   find_package(PNG)
-endif(WITH_PNG)
-
+endif()
 
 if(WITH_SDL)
   find_package(SDL2)
-endif(WITH_SDL)
-
+endif()
 
 if(WITH_THREADS)
+  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
   find_package(Threads)
-endif(WITH_THREADS)
-
+endif()
 
 if(WITH_GNUTLS)
   find_package(GnuTLS)
-endif(WITH_GNUTLS)
-
+endif()
 
 if(WITH_OPENSSL)
   find_package(OpenSSL)
-endif(WITH_OPENSSL)
-
+endif()
 
 if(WITH_SYSTEMD AND NOT ANDROID)
   find_package(PkgConfig)
   pkg_check_modules(SYSTEMD "libsystemd")
-endif(WITH_SYSTEMD AND NOT ANDROID)
-
+endif()
 
 if(WITH_GCRYPT)
   find_library(LIBGCRYPT_LIBRARIES gcrypt)
-endif(WITH_GCRYPT)
+endif()
 
 if(WITH_FFMPEG)
   find_package(FFMPEG 3.1.0)
-endif(WITH_FFMPEG)
+endif()
+
+if(WITH_SASL)
+  find_package(SASL2)
+endif()
+
 
 
 check_include_file("endian.h"      LIBVNCSERVER_HAVE_ENDIAN_H)
@@ -190,71 +189,78 @@ check_function_exists(strstr          LIBVNCSERVER_HAVE_STRSTR)
 check_symbol_exists(htobe64 "endian.h" LIBVNCSERVER_HAVE_HTOBE64)
 check_symbol_exists(OSSwapHostToBigInt64 "libkern/OSByteOrder.h" LIBVNCSERVER_HAVE_OSSWAPHOSTTOBIGINT64)
 
+
 if(Threads_FOUND)
-  set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${CMAKE_THREAD_LIBS_INIT})
-endif(Threads_FOUND)
+  list(APPEND ADDITIONAL_RAW_LIBS ${CMAKE_THREAD_LIBS_INIT})
+  list(APPEND ADDITIONAL_TARGETS Threads::Threads)
+endif()
 if(ZLIB_FOUND)
   set(LIBVNCSERVER_HAVE_LIBZ 1)
-else()
-  unset(ZLIB_LIBRARIES) # would otherwise contain -NOTFOUND, confusing target_link_libraries()
-endif(ZLIB_FOUND)
+  list(APPEND ADDITIONAL_RAW_LIBS ${ZLIB_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS ZLIB::ZLIB)
+endif()
 if(LZO_FOUND)
   set(LIBVNCSERVER_HAVE_LZO 1)
-else()
-  unset(LZO_LIBRARIES CACHE) # would otherwise contain -NOTFOUND, confusing target_link_libraries()
+  list(APPEND ADDITIONAL_LIBS ${LZO_LIBRARIES})
 endif()
 if(JPEG_FOUND)
   set(LIBVNCSERVER_HAVE_LIBJPEG 1)
-else()
-  unset(JPEG_LIBRARIES) # would otherwise confuse target_link_libraries()
-endif(JPEG_FOUND)
+  list(APPEND ADDITIONAL_RAW_LIBS ${JPEG_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS JPEG::JPEG)
+endif()
 if(PNG_FOUND)
   set(LIBVNCSERVER_HAVE_LIBPNG 1)
-endif(PNG_FOUND)
-if(NOT OPENSSL_FOUND)
-    unset(OPENSSL_LIBRARIES) # would otherwise contain -NOTFOUND, confusing target_link_libraries()
+  list(APPEND ADDITIONAL_RAW_LIBS ${PNG_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS PNG::PNG)
+endif()
+if(OPENSSL_FOUND)
+  set(LIBVNCSERVER_HAVE_OPENSSL 1)
+  list(APPEND ADDITIONAL_RAW_LIBS ${OPENSSL_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS OpenSSL::SSL OpenSSL::Crypto)
 endif()
 if(SYSTEMD_FOUND)
   add_definitions(-DLIBVNCSERVER_WITH_SYSTEMD)
   include_directories(${SYSTEMD_INCLUDE_DIRS})
   set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${SYSTEMD_LIBRARIES})
-endif(SYSTEMD_FOUND)
+endif()
 
 if(LIBVNCSERVER_HAVE_SYS_UIO_H)
   if(GNUTLS_FOUND)
     message(STATUS "Building crypto with GnuTLS")
-    set(CRYPTO_LIBRARIES ${GNUTLS_LIBRARIES})
     set(CRYPTO_SOURCES ${COMMON_DIR}/rfbcrypto_gnutls)
     include_directories(${GNUTLS_INCLUDE_DIR})
   elseif(OPENSSL_FOUND)
     message(STATUS "Building crypto with OpenSSL")
-    set(CRYPTO_LIBRARIES ${OPENSSL_LIBRARIES})
     set(CRYPTO_SOURCES ${COMMON_DIR}/rfbcrypto_openssl)
   else()
     message(STATUS "Building crypto with builtin functions")
     set(CRYPTO_SOURCES ${COMMON_DIR}/rfbcrypto_included.c ${COMMON_DIR}/md5.c ${COMMON_DIR}/sha1.c)
   endif()
   set(LIBVNCSERVER_HAVE_CRYPTO 1)
-endif(LIBVNCSERVER_HAVE_SYS_UIO_H)
+endif()
 
 
 if(WITH_WEBSOCKETS AND LIBVNCSERVER_HAVE_CRYPTO AND (LIBVNCSERVER_HAVE_HTOBE64 OR LIBVNCSERVER_HAVE_OSSWAPHOSTTOBIGINT64))
   set(LIBVNCSERVER_WITH_WEBSOCKETS 1)
 endif()
 
-if(WITH_GCRYPT AND LIBGCRYPT_LIBRARIES)
+if(Libgcrypt_FOUND)
   message(STATUS "Found libgcrypt: ${LIBGCRYPT_LIBRARIES}")
   set(LIBVNCSERVER_WITH_CLIENT_GCRYPT 1)
-  set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${LIBGCRYPT_LIBRARIES})
-endif(WITH_GCRYPT AND LIBGCRYPT_LIBRARIES)
+  list(APPEND ADDITIONAL_RAW_LIBS ${LIBGCRYPT_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS Libgcrypt::Libgcrypt)
+endif()
 
 if(GNUTLS_FOUND)
+  include( "${CMAKE_CURRENT_LIST_DIR}/cmake/GnuTLS_target.cmake" )
   set(LIBVNCSERVER_HAVE_GNUTLS 1)
-endif(GNUTLS_FOUND)
+  list(APPEND ADDITIONAL_RAW_LIBS ${GNUTLS_LIBRARIES})
+  list(APPEND ADDITIONAL_TARGETS GnuTLS::GnuTLS)
+endif()
 
 if(OPENSSL_FOUND)
   set(LIBVNCSERVER_HAVE_LIBSSL 1)
-endif(OPENSSL_FOUND)
+endif()
 
 if(WITH_IPv6)
   if(WIN32 AND LIBVNCSERVER_HAVE_WS2TCPIP_H AND LIBVNCSERVER_HAVE_VPRINTF)
@@ -263,25 +269,23 @@ if(WITH_IPv6)
   if(NOT WIN32)
     set(LIBVNCSERVER_IPv6 1)
   endif()
-endif(WITH_IPv6)
-
+endif()
 
 if(WITH_24BPP)
   set(LIBVNCSERVER_ALLOW24BPP 1)
 endif()
 
-
 if(CMAKE_USE_PTHREADS_INIT)
   set(LIBVNCSERVER_HAVE_LIBPTHREAD 1)
-endif(CMAKE_USE_PTHREADS_INIT)
+endif()
 if(LIBVNCSERVER_HAVE_SYS_SOCKET_H)
   # socklen_t
   list(APPEND CMAKE_EXTRA_INCLUDE_FILES "sys/socket.h")
-endif(LIBVNCSERVER_HAVE_SYS_SOCKET_H)
+endif()
 if(HAVE_ARPA_INET_H)
   # in_addr_t
   list(APPEND CMAKE_EXTRA_INCLUDE_FILES "arpa/inet.h")
-endif(HAVE_ARPA_INET_H)
+endif()
 
 check_type_size(pid_t     LIBVNCSERVER_PID_T)
 check_type_size(size_t    LIBVNCSERVER_SIZE_T)
@@ -289,21 +293,16 @@ check_type_size(socklen_t LIBVNCSERVER_SOCKLEN_T)
 check_type_size(in_addr_t LIBVNCSERVER_IN_ADDR_T)
 if(NOT HAVE_LIBVNCSERVER_IN_ADDR_T)
   set(LIBVNCSERVER_NEED_INADDR_T 1)
-endif(NOT HAVE_LIBVNCSERVER_IN_ADDR_T)
+endif()
 
 TEST_BIG_ENDIAN(LIBVNCSERVER_WORDS_BIGENDIAN)
 
-if(WITH_SASL)
-  find_path(SASL2_INCLUDE_DIR sasl/sasl.h)
-  find_library(LIBSASL2_LIBRARIES sasl2 libsasl.lib)
-endif(WITH_SASL)
-
-if(WITH_SASL AND LIBSASL2_LIBRARIES AND SASL2_INCLUDE_DIR)
+if(LIBSASL2_FOUND)
   message(STATUS "Building with SASL: ${LIBSASL2_LIBRARIES} and ${SASL2_INCLUDE_DIR}")
   set(LIBVNCSERVER_HAVE_SASL 1)
   set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${LIBSASL2_LIBRARIES})
   include_directories(${SASL2_INCLUDE_DIR})
-endif(WITH_SASL AND LIBSASL2_LIBRARIES AND SASL2_INCLUDE_DIR)
+endif()
 
 # TODO:
 # LIBVNCSERVER_ENOENT_WORKAROUND
@@ -369,7 +368,6 @@ elseif(OPENSSL_FOUND)
     ${LIBVNCSERVER_SOURCES}
     ${LIBVNCSERVER_DIR}/rfbssl_openssl.c
   )
-  include_directories(${OPENSSL_INCLUDE_DIR})
 else()
   set(LIBVNCCLIENT_SOURCES
     ${LIBVNCCLIENT_SOURCES}
@@ -390,7 +388,6 @@ endif()
 
 if(ZLIB_FOUND)
   add_definitions(-DLIBVNCSERVER_HAVE_LIBZ)
-  include_directories(${ZLIB_INCLUDE_DIR})
   set(LIBVNCSERVER_SOURCES
     ${LIBVNCSERVER_SOURCES}
     ${LIBVNCSERVER_DIR}/zlib.c
@@ -398,7 +395,7 @@ if(ZLIB_FOUND)
     ${LIBVNCSERVER_DIR}/zrleoutstream.c
     ${LIBVNCSERVER_DIR}/zrlepalettehelper.c
   )
-endif(ZLIB_FOUND)
+endif()
 
 if(LZO_FOUND)
   add_definitions(-DLIBVNCSERVER_HAVE_LZO)
@@ -418,12 +415,12 @@ if(JPEG_FOUND)
   add_definitions(-DLIBVNCSERVER_HAVE_LIBJPEG)
   include_directories(${JPEG_INCLUDE_DIR})
   set(TIGHT_C ${LIBVNCSERVER_DIR}/tight.c ${COMMON_DIR}/turbojpeg.c)
-endif(JPEG_FOUND)
+endif()
 
 if(PNG_FOUND)
   add_definitions(-DLIBVNCSERVER_HAVE_LIBPNG)
   include_directories(${PNG_INCLUDE_DIR})
-endif(PNG_FOUND)
+endif()
 
 set(LIBVNCSERVER_SOURCES
     ${LIBVNCSERVER_SOURCES}
@@ -438,7 +435,7 @@ if(WITH_TIGHTVNC_FILETRANSFER AND CMAKE_USE_PTHREADS_INIT)
     ${LIBVNCSERVER_DIR}/tightvnc-filetransfer/filetransfermsg.c
     ${LIBVNCSERVER_DIR}/tightvnc-filetransfer/filelistinfo.c
   )
-endif(WITH_TIGHTVNC_FILETRANSFER AND CMAKE_USE_PTHREADS_INIT)
+endif()
 
 if(LIBVNCSERVER_WITH_WEBSOCKETS)
   add_definitions(-DLIBVNCSERVER_WITH_WEBSOCKETS)
@@ -449,31 +446,21 @@ if(LIBVNCSERVER_WITH_WEBSOCKETS)
     ${COMMON_DIR}/base64.c
     ${CRYPTO_SOURCES}
   )
-endif(LIBVNCSERVER_WITH_WEBSOCKETS)
+endif()
 
 add_library(vncclient ${LIBVNCCLIENT_SOURCES})
 add_library(vncserver ${LIBVNCSERVER_SOURCES})
 if(WIN32)
   set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ws2_32)
-endif(WIN32)
+endif()
 
 target_link_libraries(vncclient
                       ${ADDITIONAL_LIBS}
-                      ${ZLIB_LIBRARIES}
-                      ${LZO_LIBRARIES}
-                      ${JPEG_LIBRARIES}
-                      ${GNUTLS_LIBRARIES}
-                      ${OPENSSL_LIBRARIES}
+                      ${ADDITIONAL_TARGETS}
 )
 target_link_libraries(vncserver
                       ${ADDITIONAL_LIBS}
-                      ${ZLIB_LIBRARIES}
-                      ${LZO_LIBRARIES}
-                      ${JPEG_LIBRARIES}
-		      ${PNG_LIBRARIES}
-		      ${CRYPTO_LIBRARIES}
-                      ${GNUTLS_LIBRARIES}
-                      ${OPENSSL_LIBRARIES}
+                      ${ADDITIONAL_TARGETS}
 )
 
 SET_TARGET_PROPERTIES(vncclient vncserver
@@ -503,28 +490,28 @@ if(CMAKE_USE_PTHREADS_INIT)
     ${LIBVNCSERVER_EXAMPLES}
     blooptest
   )
-endif(CMAKE_USE_PTHREADS_INIT)
+endif()
 
 if(WITH_TIGHTVNC_FILETRANSFER AND CMAKE_USE_PTHREADS_INIT)
   set(LIBVNCSERVER_EXAMPLES
     ${LIBVNCSERVER_EXAMPLES}
     filetransfer
   )
-endif(WITH_TIGHTVNC_FILETRANSFER AND CMAKE_USE_PTHREADS_INIT)
+endif()
 
 if(MACOS)
   set(LIBVNCSERVER_EXAMPLES
     ${LIBVNCSERVER_EXAMPLES}
     mac
   )
-endif(MACOS)
+endif()
 
 if(ANDROID)
   set(LIBVNCSERVER_EXAMPLES
     ${LIBVNCSERVER_EXAMPLES}
     androidvncserver
   )
-endif(ANDROID)
+endif()
 
 set(LIBVNCCLIENT_EXAMPLES
     backchannel
@@ -537,32 +524,32 @@ if(SDL2_FOUND)
     ${LIBVNCCLIENT_EXAMPLES}
     SDLvncviewer
   )
-endif(SDL2_FOUND)
+endif()
 
 if(FFMPEG_FOUND)
   set(LIBVNCCLIENT_EXAMPLES
     ${LIBVNCCLIENT_EXAMPLES}
     vnc2mpg
   )
-endif(FFMPEG_FOUND)
-
-
-file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/examples)
-foreach(e ${LIBVNCSERVER_EXAMPLES})
-  add_executable(examples_${e} ${LIBVNCSRVEXAMPLE_DIR}/${e}.c)
-  set_target_properties(examples_${e} PROPERTIES OUTPUT_NAME ${e})
-  set_target_properties(examples_${e} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/examples)
-  target_link_libraries(examples_${e} vncserver ${CMAKE_THREAD_LIBS_INIT})
-endforeach(e ${LIBVNCSERVER_EXAMPLES})
-
-file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/client_examples)
-foreach(e ${LIBVNCCLIENT_EXAMPLES})
-  add_executable(client_examples_${e} ${LIBVNCCLIEXAMPLE_DIR}/${e}.c ${LIBVNCCLIEXAMPLE_DIR}/${${e}_EXTRA_SOURCES} )
-  set_target_properties(client_examples_${e} PROPERTIES OUTPUT_NAME ${e})
-  set_target_properties(client_examples_${e} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/client_examples)
-  target_link_libraries(client_examples_${e} vncclient ${CMAKE_THREAD_LIBS_INIT} ${SDL2_LIBRARY} ${FFMPEG_LIBRARIES})
-endforeach(e ${LIBVNCCLIENT_EXAMPLES})
+endif()
 
+if(BUILD_EXAMPLES)
+    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/examples)
+    foreach(e ${LIBVNCSERVER_EXAMPLES})
+        add_executable(examples_${e} ${LIBVNCSRVEXAMPLE_DIR}/${e}.c)
+        set_target_properties(examples_${e} PROPERTIES OUTPUT_NAME ${e})
+        set_target_properties(examples_${e} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/examples)
+        target_link_libraries(examples_${e} vncserver Threads::Threads)
+    endforeach(e ${LIBVNCSERVER_EXAMPLES})
+
+    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/client_examples)
+    foreach(e ${LIBVNCCLIENT_EXAMPLES})
+        add_executable(client_examples_${e} ${LIBVNCCLIEXAMPLE_DIR}/${e}.c ${LIBVNCCLIEXAMPLE_DIR}/${${e}_EXTRA_SOURCES} )
+        set_target_properties(client_examples_${e} PROPERTIES OUTPUT_NAME ${e})
+        set_target_properties(client_examples_${e} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/client_examples)
+        target_link_libraries(client_examples_${e} vncclient Threads::Threads ${SDL2_LIBRARY} ${FFMPEG_LIBRARIES})
+    endforeach(e ${LIBVNCCLIENT_EXAMPLES})
+endif()
 
 #
 # them tests
@@ -570,7 +557,7 @@ endforeach(e ${LIBVNCCLIENT_EXAMPLES})
 
 if(UNIX)
     set(ADDITIONAL_TEST_LIBS m)
-endif(UNIX)
+endif()
 
 set(SIMPLETESTS
    cargstest
@@ -582,7 +569,7 @@ if(CMAKE_USE_PTHREADS_INIT)
       ${SIMPLETESTS}
       encodingstest
      )
-endif(CMAKE_USE_PTHREADS_INIT)
+endif()
 
 file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test)
 foreach(t ${SIMPLETESTS})
@@ -617,7 +604,7 @@ if(WITH_JPEG AND FOUND_LIBJPEG_TURBO)
   set_target_properties(test_tjbench PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test)
   target_link_libraries(test_tjbench vncserver vncclient ${ADDITIONAL_TEST_LIBS})
 
-endif(WITH_JPEG AND FOUND_LIBJPEG_TURBO)
+endif()
 
 if(LIBVNCSERVER_WITH_WEBSOCKETS)
   add_executable(test_wstest
@@ -627,15 +614,15 @@ if(LIBVNCSERVER_WITH_WEBSOCKETS)
   set_target_properties(test_wstest PROPERTIES OUTPUT_NAME wstest)
   set_target_properties(test_wstest PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test)
   target_link_libraries(test_wstest vncserver vncclient ${ADDITIONAL_TEST_LIBS})
-endif(LIBVNCSERVER_WITH_WEBSOCKETS)
+endif()
 
 add_test(NAME cargs COMMAND test_cargstest)
 if(FOUND_LIBJPEG_TURBO)
     add_test(NAME turbojpeg COMMAND test_tjunittest)
-endif(FOUND_LIBJPEG_TURBO)
+endif()
 if(LIBVNCSERVER_WITH_WEBSOCKETS)
     add_test(NAME wstest COMMAND test_wstest)
-endif(LIBVNCSERVER_WITH_WEBSOCKETS)
+endif()
 
 #
 # this gets the libraries needed by TARGET in "-libx -liby ..." form
@@ -644,7 +631,7 @@ function(get_link_libraries OUT TARGET)
     set(RESULT "")
     get_target_property(LIBRARIES ${TARGET} INTERFACE_LINK_LIBRARIES)
     foreach(LIB ${LIBRARIES})
-	if("${LIB}" MATCHES ".*NOTFOUND.*")
+	if(NOT LIB)
 	    continue()
 	endif()
 	string(REGEX REPLACE "^.*/lib" "" LIB ${LIB}) # remove leading path and "lib" name prefix
@@ -656,7 +643,7 @@ function(get_link_libraries OUT TARGET)
     string(CONCAT RESULT ${RESULT}) # back to string
     if(RESULT)
 	string(REPLACE "-l" " -l" RESULT ${RESULT}) # re-add separators
-    endif(RESULT)
+    endif()
     set(${OUT} ${RESULT} PARENT_SCOPE)
 endfunction()
 
@@ -681,3 +668,8 @@ install_files(/lib/pkgconfig FILES
     libvncserver.pc
     libvncclient.pc
 )
+
+  include("cmake/install_functions.cmake")
+  libvncserver__install_target(vncserver)
+  libvncserver__install_target(vncclient)
+  libvncserver__install_config_files()
diff --git a/cmake/GnuTLS_target.cmake b/cmake/GnuTLS_target.cmake
new file mode 100644
index 0000000..8f16472
--- /dev/null
+++ b/cmake/GnuTLS_target.cmake
@@ -0,0 +1,8 @@
+
+if(NOT TARGET GnuTLS::GnuTLS)
+    add_library(GnuTLS::GnuTLS UNKNOWN IMPORTED)
+    set_target_properties(GnuTLS::GnuTLS PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${GNUTLS_INCLUDE_DIRS}"
+        IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+        IMPORTED_LOCATION "${GNUTLS_LIBRARIES}")
+endif()
diff --git a/cmake/LibVNCServerBuildOptions.cmake.in b/cmake/LibVNCServerBuildOptions.cmake.in
new file mode 100644
index 0000000..ad5a3a8
--- /dev/null
+++ b/cmake/LibVNCServerBuildOptions.cmake.in
@@ -0,0 +1,11 @@
+
+
+set(LIBVNCSERVER_HAVE_LIBZ ${LIBVNCSERVER_HAVE_LIBZ})
+set(LIBVNCSERVER_HAVE_LZO ${LIBVNCSERVER_HAVE_LZO})
+set(LIBVNCSERVER_HAVE_LIBJPEG ${LIBVNCSERVER_HAVE_LIBJPEG})
+set(LIBVNCSERVER_HAVE_LIBPNG ${LIBVNCSERVER_HAVE_LIBPNG})
+set(LIBVNCSERVER_HAVE_OPENSSL ${LIBVNCSERVER_HAVE_OPENSSL})
+set(LIBVNCSERVER_HAVE_GNUTLS ${LIBVNCSERVER_HAVE_GNUTLS})
+set(LIBVNCSERVER_HAVE_LIBPTHREAD ${LIBVNCSERVER_HAVE_LIBPTHREAD})
+set(LIBVNCSERVER_HAVE_SASL ${LIBVNCSERVER_HAVE_SASL})
+set(LIBVNCSERVER_WITH_CLIENT_GCRYPT ${LIBVNCSERVER_WITH_CLIENT_GCRYPT})
diff --git a/cmake/LibVNCServerConfig.cmake b/cmake/LibVNCServerConfig.cmake
new file mode 100644
index 0000000..5b4b9c1
--- /dev/null
+++ b/cmake/LibVNCServerConfig.cmake
@@ -0,0 +1,7 @@
+
+include("${CMAKE_CURRENT_LIST_DIR}/LibVNCServerBuildOptions.cmake")
+include("${CMAKE_CURRENT_LIST_DIR}/LibVNCServerDependencies.cmake")
+
+
+include("${CMAKE_CURRENT_LIST_DIR}/vncclientTargets.cmake")
+include("${CMAKE_CURRENT_LIST_DIR}/vncserverTargets.cmake")
diff --git a/cmake/LibVNCServerDependencies.cmake b/cmake/LibVNCServerDependencies.cmake
new file mode 100644
index 0000000..3452c00
--- /dev/null
+++ b/cmake/LibVNCServerDependencies.cmake
@@ -0,0 +1,43 @@
+
+include(CMakeFindDependencyMacro)
+
+set(_save_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})
+list( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/Modules )
+
+if (LIBVNCSERVER_HAVE_LIBZ)
+    find_dependency(ZLIB)
+endif()
+
+if (LIBVNCSERVER_HAVE_LZO)
+    find_dependency(LZO)
+endif()
+
+if (LIBVNCSERVER_HAVE_LIBJPEG)
+    find_dependency(JPEG)
+endif()
+
+if (LIBVNCSERVER_HAVE_LIBPNG)
+    find_dependency(PNG)
+endif()
+
+if (LIBVNCSERVER_HAVE_LIBPTHREAD)
+    find_dependency(Threads)
+endif()
+
+if (LIBVNCSERVER_HAVE_GNUTLS)
+    find_dependency(GnuTLS)
+endif()
+
+if (LIBVNCSERVER_HAVE_OPENSSL)
+    find_dependency(OpenSSL)
+endif()
+
+if (LIBVNCSERVER_HAVE_SASL)
+    find_dependency(SASL2)
+endif()
+
+if (LIBVNCSERVER_WITH_CLIENT_GCRYPT)
+    find_dependency(Libgcrypt)
+endif()
+
+set(CMAKE_MODULE_PATH ${_save_CMAKE_MODULE_PATH})
diff --git a/cmake/install_functions.cmake b/cmake/install_functions.cmake
new file mode 100644
index 0000000..be564d1
--- /dev/null
+++ b/cmake/install_functions.cmake
@@ -0,0 +1,97 @@
+
+# absolute path of LibVNCServer/cmake/install directory
+set(LIBVNCSERVER__CMAKE__INSTALL__DIRECTORY "${CMAKE_CURRENT_LIST_DIR}")
+set(LIBVNCSERVER__CMAKE__MODULE__DIRECTORY "${PROJECT_SOURCE_DIR}/cmake/Modules")
+
+# path where config files will be installed, relative to CMAKE_INSTALL_PREFIX
+set(ConfigPackageLocation lib/cmake/LibVNCServer)
+
+# directory name where .dll/.so/.dylib will be installed, relative to CMAKE_INSTALL_PREFIX
+if(WIN32)
+    set(LIBRARY_INSTALL_DIR bin)
+else()
+    set(LIBRARY_INSTALL_DIR lib)
+endif()
+
+
+# install a target, and its Targets.cmake file
+function(libvncserver__install_target target_name)
+    install(
+        TARGETS
+            ${target_name}
+        EXPORT
+            ${target_name}Targets
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION ${LIBRARY_INSTALL_DIR}
+        RUNTIME DESTINATION bin
+        INCLUDES DESTINATION include
+    )
+    export(EXPORT ${target_name}Targets
+        FILE "${CMAKE_CURRENT_BINARY_DIR}/${target_name}Targets.cmake"
+        NAMESPACE LibVNCServer::
+    )
+    install(EXPORT ${target_name}Targets
+        FILE
+            ${target_name}Targets.cmake
+        NAMESPACE
+            LibVNCServer::
+        DESTINATION
+            ${ConfigPackageLocation}
+    )
+endfunction()
+
+
+# install config files LibVNCServerConfig.cmake and friends
+function(libvncserver__install_config_files)
+
+    # configure and install Config files
+    configure_file(
+        "${LIBVNCSERVER__CMAKE__INSTALL__DIRECTORY}/LibVNCServerConfig.cmake"
+        "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerConfig.cmake"
+        COPYONLY
+    )
+
+    # configure and install Dependencies files
+    configure_file(
+        "${LIBVNCSERVER__CMAKE__INSTALL__DIRECTORY}/LibVNCServerDependencies.cmake"
+        "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerDependencies.cmake"
+        COPYONLY
+    )
+
+    # configure Version files
+    include(CMakePackageConfigHelpers)
+    write_basic_package_version_file(
+        "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerConfigVersion.cmake"
+        VERSION ${PACKAGE_VERSION}
+        COMPATIBILITY AnyNewerVersion
+        )
+
+    # configure and install BuildOptions files
+    configure_file(
+        "${LIBVNCSERVER__CMAKE__INSTALL__DIRECTORY}/LibVNCServerBuildOptions.cmake.in"
+        "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerBuildOptions.cmake"
+        )
+
+    # install BuildOptions/Config/Dependencies/Version files
+    install(
+        FILES
+            "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerBuildOptions.cmake"
+            "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerConfig.cmake"
+            "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerConfigVersion.cmake"
+            "${CMAKE_BINARY_DIR}/${ConfigPackageLocation}/LibVNCServerDependencies.cmake"
+            DESTINATION
+                ${ConfigPackageLocation}
+            COMPONENT
+                devel
+        )
+
+    # install Find module
+    install(
+        DIRECTORY
+            "${LIBVNCSERVER__CMAKE__MODULE__DIRECTORY}"
+        DESTINATION
+            ${ConfigPackageLocation}
+        COMPONENT
+            devel
+    )
+endfunction()
